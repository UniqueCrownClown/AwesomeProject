安装react-native-cli
1. react-native init AwesomeProject
2. cd AwesomeProject
3. react-native run-android
热加载Hot Reloading与实时加载Live Reload的区别：
  1. 实时加载应用更新时需要刷新当前页面，可以看到明显的全局刷新效果。
  2. 而热加载基本上看不出刷新的效果，类似于局部刷新。

调试
1.  通过摇晃设备来打开开发菜单(adb shell input keyevent 82)
2.  热更新通过在开发菜单选择reload,或者是8081的node服务上双击rr
    (adb reverse tcp:8081 tcp:8081)
3.  npm全局安装了react-devtools可以吊起，用adb映射端口，实现页面元素查看
4.  官方推荐用snack.expo
5.  调试工具react-native-debugger，可以看页面元素,网络请求,和redux或mobx的数据流
    exe启动,安装目录E:\InstallFiles\rn-debugger-windows-ia32
6.无线调试 adb connect 手机ip
          adb tcpip 5555
          dev settings 配置pc端ip和8081端口
引入typescript
  全局安装包 yarn add --dev react-native-typescript-transformer typescript
  添加rn-cli.config.js
  添加tsconfig.json
  只要用到jsx的语法文件格式就必须是tsx,还需要引入import React from 'react';
Expo是一套沙盒开发环境，还带有一个已上架的空应用容器。(万恶的墙)
可以在没有原生开发平台（Xcode 或是 Android Studio）的情况下直接编写 React Native 应用
（当然这样你只能写 js 部分代码而没法写原生代码）
prop-types
  类组件变量检测
  static propTypes = {
    text: PropTypes.string.isRequired,
    onClick: PropTypes.func.isRequired,
    number:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),
    number:PropTypes.oneOf([12,13])

  }
  
react Navigation
  yarn add yarn add react-navigation
  yarn add react-native-gesture-handler
  react-native link react-native-gesture-handler
  mainActivity.java复制代码(按照官网)
  app.tsx引入使用
  screen是作为一个路由栈来使用??
react-native-camera实现二维码
  yarn add react-native-camera
  react-native link react-native-camera

  AndroidMainfest.xml添加权限
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
  app build.gradle的defaultConfig添加
  {
    missingDimensionStrategy 'react-native-camera', 'general'
  }
react-native-modal
react-native-vector-icons
  1. app的build.gradle添加
    project.ext.vectoricons = [
            iconFontNames: [ 'MaterialIcons.ttf', 'EvilIcons.ttf' ] // Name of the font files you want to copy
    ]
    apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
  2. react-native link react-native-vector-icons
  3. 添加自定义的icon文件？
    a. 复制iconfont的ttf文件到nodeModule到react-native-vector-icons的Fonts目录下
    b. react-native link react-native-vector-icons,模仿Ionicons.js
    c. 新建iconfonts.js在glyphmaps中新建iconfonts.json,模仿Ionicons.json,
    同级新建iconfont.d.ts,模仿Ionicons.d.ts
    d. import Myicon from 'react-native-vector-icons/iconfont';
    <Myicon name="clock" size={30} color="#900" /> 
    e. 生成iconfont.json的node脚本G:\webspace\clown\nodeJsFile\buildFontJson.js
react-native-fs(本地文件系统访问)
  demo: https://github.com/cjdell/react-native-fs-test
关于global全局变量的注入和引用的
样式Number数值
  在 React-Native 中，目前仅支持 Number 这一种长度取值。默认缺省了 pt 单位
手势触控系统
	1. longPress,pressIn,pressOut
	2. 
	View.props.onStartShouldSetResponder: (evt) => true
	View.props.onMoveShouldSetResponder: (evt) => true
	View.props.onResponderGrant: (evt) => {}
	View.props.onResponderReject: (evt) => {}
	
	View.props.onResponderMove: (evt) => {} - 用户正在屏幕上移动手指时（没有停下也没有离开屏幕）。
	View.props.onResponderRelease: (evt) => {} - 触摸操作结束时触发，比如"touchUp"（手指抬起离开屏幕）。
	View.props.onResponderTerminationRequest: (evt) => true - 有其他组件请求接替响应者，当前的 View 是否“放权”？返回 true 的话则释放响应者权力。
	View.props.onResponderTerminate: (evt) => {}  - 响应者权力已经交出。这可能是由于其他 View 通过onResponderTerminationRequest请求的，
也可能是由操作系统强制夺权（比如 iOS 上的控制中心或是通知中心）
	3. PanResponder类用于实现多点触摸

rn的热更新实现

安装过程出现问题
  build.gradle构建依赖使用compilie过时，建议换成implementation或api

ble蓝牙插件
yarn add react-native-ble-manager

react-native link react-native-ble-manager

hoc
  实现的高阶组件的方法有两种
    1. 属性代理。函数通过返回包裹原组件来添加额外功能。
    2. 反向继承。函数通过返回继承原组件来控制render
avd Manager(sdk自带模拟器)
	1. 在sdk的emulator目录打开命令行工具
	2. android list avd命令查看AVD设备的信息
	3. 启动avd命令:emulator -avd AVD名
